@page "/events/delete"
@using Microsoft.EntityFrameworkCore
@using JohnAssistantFSD.Domain
@inject IDbContextFactory<JohnAssistantFSD.Data.JohnAssistantFSDContext> DbFactory
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "User, Child")]

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Events</h2>
    <hr />
    @if (events is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@events.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@events.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EventType</dt>
            <dd class="col-sm-10">@events.EventType</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AdditionalNotes</dt>
            <dd class="col-sm-10">@events.AdditionalNotes</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">StartDateTime</dt>
            <dd class="col-sm-10">@events.StartDateTime</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EndDateTime</dt>
            <dd class="col-sm-10">@events.EndDateTime</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Location</dt>
            <dd class="col-sm-10">@events.Location</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@events.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@events.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@events.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@events.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="events" OnValidSubmit="DeleteEvents" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(events is null)">Delete</button> |
            <a href="/events">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Events? events;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        events = await context.Events.FirstOrDefaultAsync(m => m.Id == Id);

        if (events is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteEvents()
    {
        using var context = DbFactory.CreateDbContext();
        context.Events.Remove(events!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/events");
    }
}
