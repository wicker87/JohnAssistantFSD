@page "/events/details"
@using Microsoft.EntityFrameworkCore
@using JohnAssistantFSD.Domain
@inject IDbContextFactory<JohnAssistantFSD.Data.JohnAssistantFSDContext> DbFactory
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "User, Child")]

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Events</h2>
    <hr />
    @if (events is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@events.Name</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@events.Description</dd>
            <dt class="col-sm-2">EventType</dt>
            <dd class="col-sm-10">@events.EventType</dd>
            <dt class="col-sm-2">AdditionalNotes</dt>
            <dd class="col-sm-10">@events.AdditionalNotes</dd>
            <dt class="col-sm-2">StartDateTime</dt>
            <dd class="col-sm-10">@events.StartDateTime</dd>
            <dt class="col-sm-2">EndDateTime</dt>
            <dd class="col-sm-10">@events.EndDateTime</dd>
            <dt class="col-sm-2">Location</dt>
            <dd class="col-sm-10">@events.Location</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@events.DateCreated</dd>
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@events.DateUpdated</dd>
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@events.CreatedBy</dd>
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@events.UpdatedBy</dd>
        </dl>
        <div>
            <a href="@($"/events/edit?id={events.Id}")">Edit</a> |
            <a href="@($"/events")">Back to List</a>
        </div>
    }
</div>

@code {
    private Events? events;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        events = await context.Events.FirstOrDefaultAsync(m => m.Id == Id);

        if (events is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
