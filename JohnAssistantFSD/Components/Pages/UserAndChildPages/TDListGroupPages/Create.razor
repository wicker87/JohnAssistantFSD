@page "/tdlistgroups/create"
@using Microsoft.EntityFrameworkCore
@using JohnAssistantFSD.Domain
@inject IDbContextFactory<JohnAssistantFSD.Data.JohnAssistantFSDContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>TDListGroup</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="TDListGroup" OnValidSubmit="AddTDListGroup" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="todolistid" class="form-label">ToDoListId:</label> 
                <InputSelect id="todolistid" @bind-Value="TDListGroup.ToDoListId" class="form-control">
                    <option value="">-- Select todoList item --</option>
                    @if (ToDoLists != null)
                    {
                        foreach (var tdlist in ToDoLists)
                        {
                            <option value="@tdlist.Id">@tdlist.Content</option>
                        }
                    }
                </InputSelect>
                @* <InputNumber id="todolistid" @bind-Value="TDListGroup.ToDoListId" class="form-control" /> *@ 
                <ValidationMessage For="() => TDListGroup.ToDoListId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="userid" class="form-label">UserId:</label> 
                <InputSelect id="userid" @bind-Value="TDListGroup.UserId" class="form-control">
                    <option value="">-- Select User --</option>
                    @if (UserList != null)
                    {
                        foreach (var user in UserList)
                        {
                            <option value="@user.Id">@user.FirstName @user.LastName</option>
                        }
                    }
                </InputSelect>
                @* <InputText id="userid" @bind-Value="TDListGroup.UserId" class="form-control" />  *@
                <ValidationMessage For="() => TDListGroup.UserId" class="text-danger" /> 
            </div>        
            <div class="mb-3" hidden>
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="TDListGroup.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => TDListGroup.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3" hidden>
                <label for="dateupdated" class="form-label">DateUpdated:</label> 
                <InputDate id="dateupdated" @bind-Value="TDListGroup.DateUpdated" class="form-control" /> 
                <ValidationMessage For="() => TDListGroup.DateUpdated" class="text-danger" /> 
            </div>        
            <div class="mb-3" Hidden>
                <label for="createdby" class="form-label">CreatedBy:</label> 
                <InputText id="createdby" @bind-Value="TDListGroup.CreatedBy" class="form-control" /> 
                <ValidationMessage For="() => TDListGroup.CreatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3" Hidden>
                <label for="updatedby" class="form-label">UpdatedBy:</label> 
                <InputText id="updatedby" @bind-Value="TDListGroup.UpdatedBy" class="form-control" /> 
                <ValidationMessage For="() => TDListGroup.UpdatedBy" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/tdlistgroups">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private TDListGroup TDListGroup { get; set; } = new();
    private JohnAssistantFSDContext context = default!;
    private string userId = "System";
    //Inject the AuthenticationStateProvider to get the user id.
    @inject AuthenticationStateProvider authenticationStateProvider
    private IList<ToDoList> ToDoLists;
    private IList<HouseholdGroup> UserHousehold;
    private IList<HouseholdGroup> UserEntireHousehold;
    private IList<JohnAssistantFSDUser> UserList;
    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    protected override async void OnInitialized()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        // Get the userId claim
        var userIdClaim = user.FindFirst("userId");
        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
        }

        context = DbFactory.CreateDbContext();
        ToDoLists = context.ToDoList.ToList();
        UserHousehold = context.HouseholdGroup.Where(hg => hg.UserId == userId).ToList();
        UserEntireHousehold = context.HouseholdGroup.Where(ueh => UserHousehold.Any(uh => uh.HouseholdId == ueh.HouseholdId)).ToList();
        UserList = context.Users.Where(u => UserEntireHousehold.Any(ueh => ueh.UserId == u.Id)).ToList();
    }
    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddTDListGroup()
    {
        using var context = DbFactory.CreateDbContext();
        TDListGroup.CreatedBy = userId;
        TDListGroup.UpdatedBy = userId;
        //Set the DateCreated and DateUpdated fields to the current date and time.
        TDListGroup.DateCreated = DateTime.Now;
        TDListGroup.DateUpdated = DateTime.Now;
        context.TDListGroup.Add(TDListGroup);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/tdlistgroups");
    }
}
