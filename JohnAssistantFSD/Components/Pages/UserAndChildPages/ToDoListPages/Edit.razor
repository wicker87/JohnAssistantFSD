@page "/todolists/edit"
@using Microsoft.EntityFrameworkCore
@using JohnAssistantFSD.Domain
@inject IDbContextFactory<JohnAssistantFSD.Data.JohnAssistantFSDContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>ToDoList</h2>
<hr />
@if (ToDoList is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="ToDoList" OnValidSubmit="UpdateToDoList" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="ToDoList.Id" value="@ToDoList.Id" />
                <div class="mb-3">
                    <label for="content" class="form-label">Content:</label>
                    <InputText id="content" @bind-Value="ToDoList.Content" class="form-control" />
                    <ValidationMessage For="() => ToDoList.Content" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="completed" class="form-label">Completed:</label>
                    <InputCheckbox id="completed" @bind-Value="ToDoList.Completed" class="form-check-input" />
                    <ValidationMessage For="() => ToDoList.Completed" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="ToDoList.DateCreated" class="form-control" />
                    <ValidationMessage For="() => ToDoList.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="ToDoList.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => ToDoList.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="ToDoList.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => ToDoList.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputText id="updatedby" @bind-Value="ToDoList.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => ToDoList.UpdatedBy" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/todolists">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private ToDoList? ToDoList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        ToDoList ??= await context.ToDoList.FirstOrDefaultAsync(m => m.Id == Id);

        if (ToDoList is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateToDoList()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(ToDoList!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ToDoListExists(ToDoList!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/todolists");
    }

    private bool ToDoListExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.ToDoList.Any(e => e.Id == id);
    }
}
