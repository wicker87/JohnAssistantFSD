@page "/households"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using JohnAssistantFSD.Domain
@using JohnAssistantFSD.Data
@implements IAsyncDisposable
@inject IDbContextFactory<JohnAssistantFSD.Data.JohnAssistantFSDContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <AuthorizeView roles="User">
        <a href="households/create">Create New</a>
        <a href="householdgroups">Included people</a>
    </AuthorizeView>
</p>

<QuickGrid Class="table" Items="RelatedHousehold" Pagination="paginationState">
    <PropertyColumn Property="household => household.Name" Sortable="true" />
    @* <PropertyColumn Property="household => household.DateCreated" />
    <PropertyColumn Property="household => household.DateUpdated" />
    <PropertyColumn Property="household => household.CreatedBy" />
    <PropertyColumn Property="household => household.UpdatedBy" /> *@

    <TemplateColumn Context="household">
        <AuthorizeView roles="User">
            <a href="@($"households/edit?id={household.Id}")">Edit</a> |
            <a href="@($"households/details?id={household.Id}")">Details</a> |
            <a href="@($"households/delete?id={household.Id}")">Delete</a>
        </AuthorizeView>
    </TemplateColumn>
</QuickGrid>
<Paginator State="paginationState" />
@code {
    private JohnAssistantFSDContext context = default!;
    private string userId = string.Empty;
    @inject AuthenticationStateProvider authenticationStateProvider
    private IList<HouseholdGroup> HouseholdGroups;
    private IList<Household> IncludedHouseholds;
    private IQueryable<Household> RelatedHousehold => context.Household.Where(h => h.CreatedBy == userId || IncludedHouseholds.Any(hg => hg == h));
    PaginationState paginationState = new PaginationState { ItemsPerPage = 10 };
    protected override async void OnInitialized()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        // Extract user information
        userId = user.FindFirst("userId")?.Value ?? string.Empty;
        context = DbFactory.CreateDbContext();
        HouseholdGroups = context.HouseholdGroup.Where(e => e.UserId == userId).ToList();
        IncludedHouseholds=context.Household.Where(e => HouseholdGroups.Any(eg => e.Id == eg.HouseholdId)).ToList();
    }
    
    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
